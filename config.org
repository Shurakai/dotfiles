# -*- mode: org -*-
#+TITLE:     Configuration files w/ literate programming
#+AUTHOR:    Christian Heinrich
#+EMAIL:     com-config@gladbachcity.de
#+STARTUP: indent

* ZSH
** Parameters
*** Parameters used by the shell [100%]
**** DONE DIRSTACKSIZE
     :PROPERTIES:
       :CUSTOM_ID: PARAM_SHELL_DIRSTACKSIZE
       :SEE: OPTION_AUTO_PUSHD
       :SEE: OPTION_PUSHD_MINUS
       :SEE: OPTION_PUSHD_SILENT
       :SEE: OPTION_PUSHD_TO_HOME
       :SEE: OPTION_PUSHD_IGNORE_DUPS
     :END:

     The directory stack has normally unlimited size; if you want to restrict
     its size, set this variable to the value you want; you may also want to
     avoid duplicates in your stack, see [[#OPTION_PUSHD_IGNORE_DUPS][OPTION_PUSHD_IGNORE_DUPS]]
     for details.

     Here is an example of how ~DIRSTACKSIZE~ is used by ZSH:

     #+BEGIN_EXAMPLE
       % setopt AUTO_PUSHD   # We want directories to be pushed automatically onto the stack (in this example)
       % dirs -v             # Displays contents of the directory stack; only the current direcory is in there right now.
       0       ~
       % for i in {1..2}; do # Let's change the directory a few times (for demonstration purposes)
           cd /tmp
           cd ~
         done
       % dirs -v
         0       ~
         1       /tmp
         2       ~
         3       /tmp
         4       ~
       % DIRSTACKSIZE=3
       % dirs -v             # No effect yet; you must issue a CD command to update the stack
         0       ~
         1       /tmp
         2       ~
         3       /tmp
         4       ~
       % cd /tmp
       % dirs -v             # Now it's in effect; the stacksize is 3, everything beyond got truncated
         0       /tmp
         1       ~
         2       /tmp
     #+END_EXAMPLE

     #+BEGIN_SRC zsh :tangle zshrc
        DIRSTACKSIZE=10
     #+END_SRC

** Options [26/175]
:PROPERTIES:
:COOKIE_DATA: todo recursive
:END:
*** Changing Directories [70%]
**** DONE =AUTO_CD= (-J)
     :PROPERTIES:
       :CUSTOM_ID: OPTION_AUTO_CD
     :END:

     If this option is enabled, =cd= can be omitted almost always changing
     directories; the only case where it is still required is if the directory
     name happens to be equal to a command name. This option is very
     convenient to quickly change directories, for instance
     going one directory up becomes just =..= instead of =cd ..=.

     #+BEGIN_EXAMPLE
        % mkdir directory
        % directory
        zsh: command not found: directory
        % setopt AUTO_CD
        % directory  # Now equivalent to 'cd directory'
        % mkdir dir  # We create a directory that has the name of a command
        % dir        # This is not equivalent to 'cd dir' because command 'dir' exists!
        dir directory
     #+END_EXAMPLE

     #+BEGIN_SRC zsh :tangle zshrc
       setopt AUTO_CD
     #+END_SRC

     #+BEGIN_SRC zsh :tangle zshrc.default
       setopt NO_AUTO_CD
     #+END_SRC
**** DONE =AUTO_PUSHD= (-N)
     :PROPERTIES:
        :CUSTOM_ID: OPTION_AUTO_PUSHD
        :SEE: OPTION_PUSHD_MINUS
        :SEE: OPTION_PUSHD_SILENT
        :SEE: OPTION_PUSHD_TO_HOME
        :SEE: OPTION_PUSHD_IGNORE_DUPS
     :END:

     If enabled, any =cd= command pushes the new directory onto the
     directory stack automatically; this comes in handy if you want
     to navigate between several directories without having to hassle
     with the stack by yourself.

     The see the contents of the stack, use the =dirs -v= command.

     The stack itself is by default unlimited in size; it can, however,
     be restricted by the [[#PARAM_SHELL_DIRSTACK][DIRSTACK]] parameter. This
     is often useful when =AUTO_PUSHD= is used. In case you don't want
     duplicate directories, set the [[#OPTION_PUSHD_IGNORE_DUPS][PUSHD_IGNORE_DUPS]] option.

     #+BEGIN_EXAMPLE
       % dirs -v           # Displays contents of directory stack
         0       ~
       % cd /tmp
       % dirs -v
         0       /tmp
       % setopt AUTO_PUSHD
       % cd ~
       % dirs -v
         0       ~
         1       /tmp
     #+END_EXAMPLE

     #+BEGIN_SRC zsh :tangle zshrc
        setopt AUTO_PUSHD
     #+END_SRC

     #+BEGIN_SRC zsh :tangle zshrc.default
        setopt NO_AUTO_PUSHD
     #+END_SRC

**** DONE =CDABLE_VARS= (-T)
     :PROPERTIES:
        :CUSTOM_ID: OPTION_CDABLE_VARS
     :END:

     If set, any argument given to a =cd= command (or an implied =cd= if the
     [[#OPTION_AUTO_CD]] option is set) that is neither a directory nor starts with a
     slash will be expanded as if it were preceded by a "=~=". That is, you
     can assign directory names to a variable and then =cd= into that directory
     by passing the variable name as the argument:

     #+BEGIN_EXAMPLE
       % dir=/tmp/      # Assign directory name to a variable
       % cd dir         # Note: We really mean "dir" here, not $dir!
       cd: no such file or directory: dir
       % setopt CDABLE_VARS # Now activate this option
       % cd dir         # Now it works - we will switch to /tmp now, displayed as ~dir.
       ~dir
       % pwd
       /tmp
     #+END_EXAMPLE

     This feature is very helpful if there are directories that you need to
     =cd= into frequently, such as folders containing projects you're working on.

     #+BEGIN_SRC zsh :tangle zshrc
      setopt CDABLE_VARS
     #+END_SRC

     #+BEGIN_SRC zsh :tangle zshrc.default
      unsetopt CDABLE_VARS
     #+END_SRC

**** TODO =CHASE_DOTS=
**** TODO =CHASE_LINKS= (-w)
     :PROPERTIES:
        :CUSTOM_ID: OPTION_CHASE_LINKS
     :END:

     If this option is set, if you pass a symlink to =cd= (or even a symlink as a part
     of the path you pass), each symlink will be resolved to the actual folder.

     #+BEGIN_EXAMPLE
       % ls -ald *(@) # Show all symlinks in the current folder
       lrwxrwxrwx 1 ch ch 24 Jun 22 19:56 homedir -> /home/ch
       % cd homedir
     #+END_EXAMPLE

     Note: You can also achieve this behavior by passing the =-P= option to =cd=.

     #+BEGIN_SRC zsh :tangle zshrc
       unsetopt CHASE_LINKS
     #+END_SRC

     #+BEGIN_SRC zsh :tangle zshrc.default
       unsetopt CDABLE_VARS
     #+END_SRC

**** TODO =POSIX_CD=
**** DONE =PUSHD_IGNORE_DUPS=
     :PROPERTIES:
     :CUSTOM_ID: OPTION_PUSHD_IGNORE_DUPS
     :END:

     If set, this option prevents any directory to be at two different
     positions in the stack; that is, every entry is unique.
     This option is especially useful if [[#OPTION_AUTO_PUSHD][AUTO_PUSHD]] is set.

     The following example demonstrates that duplicates are prevented:

     #+BEGIN_EXAMPLE
        % dirs -v
          0       ~
        % setopt PUSHD_IGNORE_DUPS
        % cd /tmp
        % dirs -v
          0       /tmp
          1       ~
        % cd ~
        % dirs -v       # Here, the existing entry for ~ was removed and a new entry was pushed onto the stack
          0       ~
          1       /tmp
     #+END_EXAMPLE

     #+BEGIN_SRC zsh :tangle zshrc
       setopt PUSHD_IGNORE_DUPS
     #+END_SRC

     #+BEGIN_SRC zsh :tangle zshrc.default
       setopt NO_PUSHD_IGNORE_DUPS
     #+END_SRC

**** DONE =PUSHD_MINUS=
     :PROPERTIES:
     :CUSTOM_ID: OPTION_PUSHD_MINUS
     :END:

     The =cd= and =popd= builtins can use the directory stack by the =+/-=
     arguments. For instance, =cd +1= switches to the directory represented
     by the second element on the directory stack (as counting starts from
     0) and =cd -1= does the same but starts counting upwards from the bottom
     of the stack. (So =cd -1= is the second last element.)

     (Note: The content of the directory stack can be displayed with the =dirs=
     builtin; use =dirs -v= if you want to see explicitly the position of
     each element.)

     The meaning of =+= and =-= in this context can be reversed by activating
     this option:

     #+BEGIN_EXAMPLE
        % pushd /tmp
        /tmp ~
        % pushd /bin
        /bin /tmp ~
        % pushd /boot
        /boot /bin /tmp ~
        % setopt PUSHD_MINUS
        % cd -1
        /bin
     #+END_EXAMPLE

     #+BEGIN_SRC zsh :tangle zshrc
        setopt PUSHD_MINUS
     #+END_SRC

     #+BEGIN_SRC zsh :tangle zshrc.default
        setopt NO_PUSHD_MINUS
     #+END_SRC


**** DONE =PUSHD_SILENT= (-E)
     :PROPERTIES:
     :CUSTOM_ID: OPTION_PUSHD_SILENT
     :END:

     If unset (as is the default), ZSH will print the content of the
     directory stack every time =pushd= or =popd= is used; with this option
     enabled, any output will be suppressed.

     #+BEGIN_EXAMPLE
        % cd /bin
        % pushd
        ~ /bin
        % setopt PUSHD_SILENT
        % cd /tmp
        % pushd                     # Doesn't output anything anymore
        % dirs -v
        0       /bin
        1       /tmp
     #+END_EXAMPLE

     #+BEGIN_SRC zsh :tangle zshrc
       setopt PUSHD_SILENT
     #+END_SRC

     #+BEGIN_SRC zsh :tangle zshrc.default
       setopt NO_PUSHD_SILENT
     #+END_SRC


**** DONE =PUSHD_TO_HOME= (-D)
     :PROPERTIES:
     :CUSTOM_ID: OPTION_PUSHD_TO_HOME
     :END:

     If enabled, executing =pushd= without any parameters is the same as
     executing =pushd $HOME=; this is also the case (even with this option
     disabled) if the directory stack contains only one entry:

     #+BEGIN_EXAMPLE
        % cd /tmp
        % dirs
        /tmp
        % setopt NO_PUSHD_TO_HOME
        % pushd
        ~ /tmp
        % pwd
        /home/ch
     #+END_EXAMPLE

     If there is more than one entry on the stack and this option is unset,
     then calling =pushd= will simply swap the first two entries on the
     stack:

     #+BEGIN_EXAMPLE
        % pushd /tmp
        /tmp ~
        % pushd /bin
        /bin /tmp ~
        % pwd
        /bin
        % pushd
        /tmp /bin ~
        % pwd
        /tmp
     #+END_EXAMPLE

     This behavior changes when this option is enabled:

     #+BEGIN_EXAMPLE
        % setopt PUSHD_TO_HOME
        % pushd /tmp
        /tmp ~
        % pushd /bin
        /bin /tmp ~
        % pushd
        ~ /bin /tmp ~
     #+END_EXAMPLE

     Note: If you don't want the stack to contain duplicates as
     in the example above, use the [[#OPTION_PUSHD_IGNORE_DUPS][PUSHD_IGNORE_DUPS option]].


*** Completion [30%]
   cf. Section 16.2.2 http://zsh.sourceforge.net/Doc/Release/Options.html#Options
**** STARTED =ALWAYS_LAST_PROMPT= <Default>

     Check userguide 6.2.2

**** STARTED =ALWAYS_TO_END=

     Check 6.2.4 in the userguide.

**** DONE =AUTO_LIST= (-9) <Default>

     Show menu completion by default if completion results are ambiguous 
     (otherwise you may have to press some keys, such as =^D=);
     this option does not select an entry on displaying the menu;
     see option [[#OPTION_MENU_COMPLETE][MENU_COMPLETE]] for that.

     #+BEGIN_SRC zsh :tangle zshrc
      setopt AUTO_LIST
     #+END_SRC

     #+BEGIN_SRC zsh :tangle zshrc.default
      setopt AUTO_LIST
     #+END_SRC

**** STARTED =AUTO_MENU= <D>

     Check userguide 6.2.1

**** TODO =AUTO_NAME_DIRS=
**** STARTED =AUTO_PARAM_KEYS= <D>

     Check 6.2.4 of the user guide.

**** STARTED =AUTO_PARAM_SLASH= <D>

     Check 6.2.4 of the user guide.

**** STARTED =AUTO_REMOVE_SLASH= <D>

     Check 6.2.4 of the user guide.
     This tells in the last sentence what it does NOT do.

**** STARTED =BASH_AUTO_LIST=

     Check userguide 6.2.1

**** DONE =COMPLETE_ALIASES=

     If this option is enabled, aliases will not have the same completion as
     the command they are referring to as they are not internally substituted when
     completion is attempted; hence, aliases look like distinct commands to
     the completion.

     #+BEGIN_SRC zsh :tangle zshrc
       setopt NO_COMPLETE_ALIASES
     #+END_SRC

**** DONE =COMPLETE_IN_WORD=
     :PROPERTIES:
        :CUSTOM_ID: COMPLETE_IN_WORD
     :END:

     If enabled, completion can be called from within a word; the completion will
     then try and take both everything before and everything after the cursor
     into account: The position of the cursor determines where the completion
     is attempted.

     #+BEGIN_EXAMPLE
       % setopt NO_COMPLETE_IN_WORD # Disable this option first; default behavior
       % ls te*
       terr  test1
       % vi te<CURSOR:TAB>1 # Offers terr and test1 as completion
       % setopt COMPLETE_IN_WORD
       % vi te<CURSOR:TAB>1 # Completes to test1, as terr has no "1" at the end
     #+END_EXAMPLE

     #+BEGIN_SRC zsh :tangle zshrc
       setopt COMPLETE_IN_WORD
     #+END_SRC

     #+BEGIN_SRC zsh :tangle zshrc.default
       setopt NO_COMPLETE_IN_WORD
     #+END_SRC

**** DONE =GLOB_COMPLETE=

     If this option is set, expanding a (glob) pattern will not insert all
     the matches but instead generates a list that can be cycled through like
     [[#MENU_COMPLETE][MENU_COMPLETE]].

     A =*= is added to the end of the word or at the position of the cursor,
     if [[#COMPLETE_IN_WORD][COMPLETE_IN_WORD]] is set; furthermore, as pattern
     matching is used, this option also affects any completion for options,
     user names etc.

     Note: If pattern matching is employed, you cannot use matching control
     to include constraints such as case-insensitivity or anchored matching.
     However, this limitation only applies when the current word contains
     a pattern; simply turning on the =GLOB_COMPLETE= option does not have
     this effect.

     #+BEGIN_EXAMPLE
       % setopt NO_GLOB_COMPLETE # Disable this option first; default behavior
       % ls example*
       example1 example2
       % cat example<TAB>   # becomes cat example1 example2
       % setopt GLOB_COMPLETE
       % cat example<TAB>   # asks for completion: Only example1 or example2 is selected.
     #+END_EXAMPLE

     #+BEGIN_SRC zsh :tangle zshrc
       setopt NO_GLOB_COMPLETE
     #+END_SRC

**** TODO =HASH_LIST_ALL= <D>
**** STARTED =LIST_AMBIGUOUS= <D>

     Check userguide 6.2.1

**** STARTED =LIST_BEEP= <D>

     Check userguide 6.2.1

**** DONE =LIST_PACKED=

     If set, this option reduces the size of the completion menu by making its
     columnwidth dynamic; that is, the width of columns will be determined by
     the content of the columns and each two columns might have different widths.

     #+BEGIN_SRC zsh :tangle zshrc
       setopt LIST_PACKED
     #+END_SRC

     #+BEGIN_SRC zsh :tangle zshrc.default
       setopt NO_LIST_PACKED
     #+END_SRC

**** STARTED =LIST_ROWS_FIRST=

     Check userguide 6.2.5

**** STARTED =LIST_TYPES= (-X) <D>

     Check 5.9.6 of the user guide and 6.2.5.

**** DONE =MENU_COMPLETE= (-Y)
     :PROPERTIES:
        :CUSTOM_ID: OPTION_MENU_COMPLETE
     :END:

     On an ambiguous completion, do not beep and show a menu with matches; the
     first match is inserted immediately.  If completion is requested again,
     cycle through matches, and remove any changes made by a prior match.  When
     there are no more matches, go back to the first one.
     =reverse-menu-complete= may be used to loop through the list in the other
     direction. This option overrides AUTO_MENU.

     #+BEGIN_EXAMPLE
       % setopt MENU_COMPLETE
       % ls te*
       terr  test1
       % vi te<TAB> # selects 'terr' immediately
     #+END_EXAMPLE

     #+BEGIN_SRC zsh :tangle zshrc
      setopt NO_MENU_COMPLETE
     #+END_SRC

     #+BEGIN_SRC zsh :tangle zshrc.default
      setopt NO_MENU_COMPLETE
     #+END_SRC
**** STARTED =REC_EXACT= (-S)

     Check userguide 6.2.1

*** Expansion and globbing [17%]
**** TODO =BAD_PATTERN= (+2) <C> <Z>
**** STARTED =BARE_GLOB_QUAL= <Z>

     Check 5.9.6 of the user guide.

**** TODO =BRACE_CCL=
**** TODO =CASE_GLOB= <D>
**** TODO =CASE_MATCH= <D>
**** TODO =CSH_NULL_GLOB= <C>
**** STARTED =EQUALS= <Z>
     
          Check userguide 5.8; if set, "ls =ls" will be equivalent to "ls `which ls`"
**** STARTED =EXTENDED_GLOB=

     Check 5.9.4 in the user guide.
**** TODO =FORCE_FLOAT=
**** DONE =GLOB= (+F, ksh: +f) <D>
     :PROPERTIES:
     :CUSTOM_ID: OPTION_GLOB
     :END:
     If disabled, globbing (filename generation) will be completely disabled;
     i.e., using ~print file*~ actually prints =file*= instead of all files
     starting with the prefix =file=.

     #+BEGIN_SRC zsh :tangle zshrc
       setopt GLOB
     #+END_SRC

     #+BEGIN_SRC zsh :tangle zshrc.default
       setopt GLOB
     #+END_SRC
**** TODO =GLOB_ASSIGN= <C>
**** DONE =GLOB_DOTS= (-4)
     :PROPERTIES:
     :CUSTOM_ID: OPTION_GLOB_DOTS
     :END:

     If activated, files with a leading '.' are also matched by globbing,
     except for =..= (parent directory) and =.= (current directory).
     This also means that the '.' does not need to be explicitly specified to
     enable completion.

     #+BEGIN_EXAMPLE
       % setopt NO_GLOB_DOTS # Disable this option first; default behavior
       % touch .example
       % ls *example
       zsh: no matches found: *example
       % vi example<TAB>   # Does not complete to .example
       % setopt GLOB_DOTS
       % ls *example
       .example
       % vi example<TAB>   # Completes to .example
     #+END_EXAMPLE

     #+BEGIN_SRC zsh :tangle zshrc
       setopt GLOB_DOTS
     #+END_SRC

     #+BEGIN_SRC zsh :tangle zshrc.default
       setopt NO_GLOB_DOTS
     #+END_SRC
**** DONE GLOB_SUBST= <C> <K> <S>
     :PROPERTIES:
     :CUSTOM_ID: OPTION_GLOB_SUBST
     :END:

     If a parameter (variable) gets expanded, any character resulting from this operation
     is being treated as eligible for file expansion and filename generation.

     Note: Braces (and contained commas) do not become eligible for expansion.

     #+BEGIN_EXAMPLE
       % setopt NO_GLOB_SUBST
       % export TEST="*"
       % ls *
       testfile1 testfile2
       % ls $TEST<TAB> # Becomes ls \*
       % setopt GLOB_SUBST
       % ls $TEST<TAB> # Becomes ls testfile1 testfile2
     #+END_EXAMPLE

     #+BEGIN_SRC zsh :tangle zshrc
      setopt NO_GLOB_SUBST
     #+END_SRC

**** TODO =HIST_SUBST_PATTERN=
**** TODO =IGNORE_BRACES= (-I) <S>
**** TODO =IGNORE_CLOSE_BRACES=
**** TODO =KSH_GLOB= <K>
**** STARTED =MAGIC_EQUAL_SUBST=

     Check userguide 5.8

**** TODO =MARK_DIRS= (-8, ksh: -X)
**** TODO =MULTIBYTE= <C> <K> <Z>
**** DONE =NOMATCH= (+3) <C> <Z>
     :PROPERTIES:
     :CUSTOM_ID: OPTION_NOMATCH
     :END:

     If enabled, this option prints an error message if a filename generation pattern does
     not match anything. This also applies to file expansion of an initial
     ='~'= or ='='=. However, if disabled, any pattern that does not
     match will be left unchanged, i.e., it will be passed as an argument to
     the command:

     #+BEGIN_EXAMPLE
        % setopt NOMATCH                  # Default in ZSH
        % ls test*                        # Error: ls not executed
        zsh: no matches found: test*
        % print -- test*                  # Error: print not executed
        zsh: no matches found: test*
        % setopt NO_NOMATCH               # Disables this option
        % ls test*                        # ls is now executed with test* a parameter
        ls: cannot access test*: No such file or directory
        % print -- test*                  # print is now executed
        test*
     #+END_EXAMPLE

     #+BEGIN_SRC zsh :tangle zshrc
       setopt NOMATCH
     #+END_SRC

     #+BEGIN_SRC zsh :tangle zshrc.default
       setopt NOMATCH
     #+END_SRC
**** DONE =NULL_GLOB= (-G)
     :PROPERTIES:
     :CUSTOM_ID: OPTION_NULL_GLOB
     :END:

     #+BEGIN_EXAMPLE
        % cd ~
        % ls test*
        zsh: no matches found: test*
        % setopt NULL_GLOB           # Activate this option
        % ls test*                   # Removes the pattern, hence issues 'ls' only
        bin Documents Downloads Games Pictures Public
     #+END_EXAMPLE

     If activated, this option removes any filename generation pattern that
     does not match anything; hence, no error will be reported as done by
     the [[#OPTION_NOMATCH][NOMATCH option]], as this option is completely
     overriden.

     #+BEGIN_SRC zsh :tangle zshrc
       setopt NO_NULL_GLOB
     #+END_SRC

     #+BEGIN_SRC zsh :tangle zshrc.default
       setopt NO_NULL_GLOB
     #+END_SRC

**** TODO =NUMERIC_GLOB_SORT=
**** TODO =RC_EXPAND_PARAM= (-P)

     Check userguide 5.4.5
**** TODO =REMATCH_PCRE= <Z>
**** STARTED =SH_GLOB= <K> <S>

     See 5.9.3 "Parentheses" in the user guide.
**** TODO =UNSET= (+u, ksh: +u) <K> <S> <Z>
**** TODO =WARN_CREATE_GLOBAL=
*** History [0%]
**** TODO =APPEND_HISTORY= <D>
**** TODO =BANG_HIST= (+K) <C> <Z>
**** TODO =EXTENDED_HISTORY= <C>
**** TODO =HIST_ALLOW_CLOBBER=
**** TODO =HIST_BEEP= <D>
**** TODO =HIST_EXPIRE_DUPS_FIRST=
**** TODO =HIST_FCNTL_LOCK=
**** TODO =HIST_FIND_NO_DUPS=
**** TODO =HIST_IGNORE_ALL_DUPS=
**** TODO =HIST_IGNORE_DUPS= (-h)
**** TODO =HIST_IGNORE_SPACE= (-g)
**** TODO =HIST_LEX_WORDS=
**** TODO =HIST_NO_FUNCTIONS=
**** TODO =HIST_NO_STORE=
**** TODO =HIST_REDUCE_BLANKS=
**** TODO =HIST_SAVE_BY_COPY= <D>
**** TODO =HIST_SAVE_NO_DUPS=
**** TODO =HIST_VERIFY=
**** TODO =INC_APPEND_HISTORY=
**** TODO =INC_APPEND_HISTORY_TIME=
**** TODO =SHARE_HISTORY= <K>

*** Initialisation [0%]
**** TODO =ALL_EXPORT= (-a, ksh: -a)
**** TODO =GLOBAL_EXPORT= (<Z>)
**** TODO =GLOBAL_RCS= (-d) <D>
**** TODO =RCS= (+f) <D>
*** Input/Output [14%]
**** DONE =ALIASES= <D>

     With this option you can disable aliases (as they are enabled by default);
     see the corresponding manual page for details on what aliases are and what
     they do.

     #+BEGIN_SRC zsh :tangle zshrc
        setopt ALIASES
     #+END_SRC

**** TODO =CLOBBER= (+C, ksh: +C) <D>
**** TODO =CORRECT= (-0)
**** TODO =CORRECT_ALL= (-O)
**** TODO =DVORAK=
**** TODO =FLOW_CONTROL= <D>
**** TODO =IGNORE_EOF= (-7)
**** TODO =INTERACTIVE_COMMENTS= (-k) <K> <S>
**** TODO =HASH_CMDS= <D>
**** TODO =HASH_DIRS= <D>
**** TODO =HASH_EXECUTABLES_ONLY=
**** TODO =MAIL_WARNING= (-U)
**** TODO =PATH_DIRS= (-Q)
**** TODO =PATH_SCRIPT= <K> <S>
**** TODO =PRINT_EIGHT_BIT=
**** TODO =PRINT_EXIT_VALUE= (-1)
**** TODO =RC_QUOTES=
**** DONE =RM_STAR_SILENT= (-H) <K> <S>
     :PROPERTIES:
        :CUSTOM_ID: RM_STAR_SILENT
        :SEE: RM_STAR_WAIT
     :END:

     ZSH tries to protect the user from accidentally deleting all files in a directory;
     that is, ZSH complains when =rm= is used and a =*= occurs in your filematching
     pattern; ZSH does not complain, however, if you deliberately expand this pattern
     (as you will see exactly which files are selected).

     #+BEGIN_EXAMPLE
        % rm ./*
        zsh: sure you want to delete all the files in /tmp/test/. [yn]?
     #+END_EXAMPLE

     This is helpful to prevent you from wiping your data accidentally;
     in case you don't want to confirm that you're really sure, turn
     this option on - ZSH will not ask again.

     #+BEGIN_SRC zsh :tangle zshrc
        setopt NO_RM_STAR_SILENT
     #+END_SRC

**** DONE =RM_STAR_WAIT=
     :PROPERTIES:
        :CUSTOM_ID: RM_STAR_WAIT
     :END:

     If [[#RM_STAR_SILENT]] is not set (that is, you need to confirm if you try
     to issue ~rm *~ and friends), setting this option makes you wait for
     ten seconds before you can even answer "yes" or "no".

     The motivation for this option is to prevent the user from hitting "yes"
     in a reflex.

     Note: If you expand the =*=, you do not have to wait ten seconds to delete
     the files you want. This is helpful if you /really/ want to use the =*=.

     #+BEGIN_EXAMPLE
        % rm ./*
        zsh: sure you want to delete all the files in /tmp/test/.? (waiting ten seconds)
        [yn] # This line only appears after ten seconds!
     #+END_EXAMPLE

     #+BEGIN_SRC zsh :tangle zshrc
        setopt NO_RM_STAR_SILENT
     #+END_SRC

**** TODO =SHORT_LOOPS= <C> <Z>
**** TODO =SUN_KEYBOARD_HACK= (-L)

*** Job Control [44%]
**** TODO =AUTO_CONTINUE=
**** TODO =AUTO_RESUME= (-W)
**** TODO =BG_NICE= (-6) <C> <Z>
**** TODO =CHECK_JOBS= <Z>
**** DONE =HUP= <Z>
     :PROPERTIES:
     :CUSTOM_ID: OPTION_HUP
     :END:

     This option is enabled by default in ZSH and will cause ZSH
     to send the =HUP= (/hang up/) signal to be sent to any background
     process if the shell is going to terminate (i.e., you used one of
     ~exit~, ~logout~, ~bye~ etc. or a non-interactive shell started
     background jobs).

     That is, with this option unset, jobs will continue to run
     normall when the shell exits.

     #+BEGIN_EXAMPLE
        # First shell
        % setopt NO_HUP
        % sleep 500 &
        [1] 20931               
        % exit
        zsh: you have running jobs.
        % exit                      # 2nd exit = exits. See also CHECK_JOBS option.

        # Executed in a 2nd shell!
        % ps auxw | grep "sleep"
        ch 20988  0.0  0.0  13064   608 pts/8    SN   01:04   0:00 sleep 500


        # Start a new shell...
        % setopt HUP
        % sleep 500 &
        [1] 21168               
        % exit
        zsh: you have running jobs.
        % exit                      # 2nd exit = exits. See also CHECK_JOBS option.

        # Executed in a 2nd shell!
        % ps auxw | grep "sleep"    # Returns nothing, as process was killed!
                                    # (for you, it may return 20931 from above...)
        %                           # Yup, nothing there...
     #+END_EXAMPLE
     
     #+BEGIN_SRC zsh :tangle zshrc
        setopt HUP
     #+END_SRC

     #+BEGIN_SRC zsh :tangle zshrc.default
        setopt HUP
     #+END_SRC

**** DONE =LONG_LIST_JOBS= (-R)
     :PROPERTIES:
     :CUSTOM_ID: OPTION_LONG_LIST_JOBS
     :END:

     If activated, jobs will be listed using the long format; that is,
     when the job terminates, ZSH will also tell you the process id
     this job had. 

     This option has no effect if the [[#OPTION_MONITOR][MONITOR option]] is turned off.

     #+BEGIN_EXAMPLE
        % setopt LONG_LIST_JOBS
        % sleep 5 &
        [1] 20241               
        % 
        [1]  + 20241 done       sleep 5     # Includes process id!
        % setopt NO_LONG_LIST_JOBS
        % sleep 5 &
        [1] 20330               
        % 
        [1]  + done       sleep 5           # ... not anymore!
     #+END_EXAMPLE
     
     #+BEGIN_SRC zsh :tangle zshrc
        setopt LONG_LIST_JOBS
     #+END_SRC

     #+BEGIN_SRC zsh :tangle zshrc.default
        setopt NO_LONG_LIST_JOBS
     #+END_SRC

**** DONE =MONITOR= (-m, ksh: -m)
     :PROPERTIES:
     :CUSTOM_ID: OPTION_MONITOR
     :END:

     In ZSH, this option is enabled by default for interactive shells (that
     is, shells that accept commands from you instead of reading them from a
     file). It's behavior is quite simply:

     If activated, starting a job and putting it in the background right away
     by using the =&= sign at the end of the command will notify you about 
     the job number (a value local to this shell) and the process number 
     this new process was given by the operating system. You will furthermore
     be notified when this process ends (you can determine when you want to
     be notified by (un-)setting the [[#OPTION_NOTIFY][NOTIFY option]]).

     #+BEGIN_EXAMPLE
        % setopt MONITOR
        % sleep 3 &
        [1] 20058               # This output line was caused by this option
        % seto                  # We start typing... but we're interrupted
        [1]  + done       sleep 3
        % setopt NO_MONITOR     # ... but we can continue typing after "seto"!
        % sleep 5 &
        %                       # Nothing happens; we won't get notifications
     #+END_EXAMPLE
     
     #+BEGIN_SRC zsh :tangle zshrc
        setopt MONITOR
     #+END_SRC

     #+BEGIN_SRC zsh :tangle zshrc.default
        setopt MONITOR
     #+END_SRC

**** DONE =NOTIFY= (-5, ksh: -b) <Z>
     :PROPERTIES:
     :CUSTOM_ID: OPTION_NOTIFY
     :END:

     Reports the status of background jobs immediately (i.e., jobs you've
     started from this shell by for instance adding the =&= character
     at the end of your command). If disabled, you will only be notified
     about the termination of your job when a new prompt is printed.

     #+BEGIN_EXAMPLE
        % setopt NOTIFY     # It's always enabled by default 
        % sleep 3 &
        [1] 19316
        %                   # Don't do anything now, just wait 3seconds...
        [1]  + done       sleep 3
        %                   # We didn't do anything; but a new prompt was printed!
        % setopt NO_NOTIFY  # Now disable it...
        % sleep 3 &         
        %                   # Nothing will appear now, until you hit return..
        [1]  + done       sleep 3
     #+END_EXAMPLE

     #+BEGIN_SRC zsh :tangle zshrc
        setopt NOTIFY
     #+END_SRC

     #+BEGIN_SRC zsh :tangle zshrc.default
        setopt NOTIFY
     #+END_SRC

**** TODO =POSIX_JOBS= <K> <S>

*** Prompting [0%]
**** TODO =PROMPT_BANG= <K>
**** TODO =PROMPT_CR= (+V) <D>
**** TODO =PROMPT_SP= <D>
**** TODO =PROMPT_PERCENT= <C> <Z>
**** TODO =PROMPT_SUBST= <K> <S>
**** TODO =TRANSIENT_RPROMPT=

*** Scripts and functions [0%]
**** TODO =C_BASES=
**** TODO =C_PRECEDENCES=
**** TODO =DEBUG_BEFORE_CMD=
**** TODO =ERR_EXIT= (-e, ksh: -e)
**** TODO =ERR_RETURN=
**** TODO =EVAL_LINENO= <Z>
**** TODO =EXEC= (+n, ksh: +n) <D>
**** TODO =FUNCTION_ARGZERO= <C> <Z>
**** TODO =LOCAL_LOOPS=
**** TODO =LOCAL_OPTIONS= <K>
**** TODO =LOCAL_PATTERNS=
**** TODO =LOCAL_TRAPS= <K>
**** TODO =MULTI_FUNC_DEF= <Z>
**** TODO =MULTIOS= <Z>
**** TODO =OCTAL_ZEROES= <S>
**** TODO =PIPE_FAIL=
**** TODO =SOURCE_TRACE=
**** TODO =TYPESET_SILENT=
**** TODO =VERBOSE= (-v, ksh: -v)
**** TODO =XTRACE= (-x, ksh: -x)

*** Shell emulation [4%]
**** TODO =BASH_REMATCH=
**** TODO =BSD_ECHO= <S>
**** TODO =CONTINUE_ON_ERROR=
**** TODO =CSH_JUNKIE_HISTORY= <C>
**** TODO =CSH_JUNKIE_LOOPS= <C>
**** TODO =CSH_JUNKIE_QUOTES= <C>
**** TODO =CSH_NULLCMD= <C>
**** TODO =KSH_ARRAYS= <K> <S>
**** TODO =KSH_AUTOLOAD= <K> <S>
**** TODO =KSH_OPTION_PRINT= <K>
**** TODO =KSH_TYPESET= <K>
**** TODO =KSH_ZERO_SUBSCRIPT=
**** TODO =POSIX_ALIASES= <K> <S>
**** TODO =POSIX_ARGZERO=
**** TODO =POSIX_BUILTINS= <K> <S>
**** TODO =POSIX_IDENTIFIERS= <K> <S>
**** TODO =POSIX_STRINGS= <K> <S>
**** TODO =POSIX_TRAPS= <K> <S>
**** TODO =SH_FILE_EXPANSION= <K> <S>
**** TODO =SH_NULLCMD= <K> <S>
**** DONE =SH_OPTION_LETTERS= <K> <S>

     Many options in ZSH also have one-letter shortcuts assigned to
     them, making it very quick to enable/disable specific options; in fact,
     there are two different sets of one-letter
     options. The first one is the "default" zsh set and used by default;
     the second one is used to emulate sh/ksh options.

     Take for example the [[#OPTION_NOTIFY][NOTIFY option]]: The default one-char option is =-5=,
     but if =SH_OPTION_LETTERS= is set, the one-character option becomes =-b=.

     #+BEGIN_EXAMPLE
        % setopt NO_SH_OPTION_LETTERS   # Default
        % setopt -b                     # Try to set the NOTIFY option
        setopt: bad option: -b
        % setopt SH_OPTION_LETTERS
        % setopt -b                     # This command was now successful
     #+END_EXAMPLE

     #+BEGIN_SRC zsh :tangle zshrc
       setopt NO_SH_OPTION_LETTERS
     #+END_SRC

     #+BEGIN_SRC zsh :tangle zshrc.default
       setopt NO_SH_OPTION_LETTERS
     #+END_SRC

**** TODO =SH_WORD_SPLIT= (-y) <K> <S>

     See userguide 5.4.4

**** TODO =TRAPS_ASYNC=

*** Shell State [0%]
**** TODO =INTERACTIVE= (-i, ksh: -i)
**** TODO =LOGIN= (-l, ksh: -l)
**** TODO =PRIVILEGED= (-p, ksh: -p)
**** TODO =RESTRICTED= (-r)
**** TODO =SHIN_STDIN= (-s, ksh: -s)
**** TODO =SINGLE_COMMAND= (-t, ksh: -t)
*** ZLE [0%]
**** TODO =BEEP= (+B) <D>
**** TODO =COMBINING_CHARS=
**** TODO =EMACS=
**** STARTED =OVERSTRIKE=
     :PROPERTIES:
     :CUSTOM_ID: OPTION_OVERSTRIKE
     :END:

     This option starts ZSH in overstrike mode; to quote [[https://en.wikipedia.org/wiki/Overstrike][Wikipedia]]:

     #+BEGIN_QUOTE
      In typography, overstrike is a method of printing characters that are missing from the printer's character set.
      The character was created by placing one character on another one — for example, overstriking "L" with "-" resulted in printing a "Ł" character.  
     #+END_QUOTE

     #+BEGIN_SRC zsh :tangle zshrc
        setopt NO_OVERSTRIKE
     #+END_SRC

     #+BEGIN_SRC zsh :tangle zshrc.default
        setopt NO_OVERSTRIKE
     #+END_SRC

**** TODO =SINGLE_LINE_ZLE= (-M) <K>
**** DONE =VI=
     :PROPERTIES:
     :CUSTOM_ID: OPTION_VI
     :END:

     This option changes the ZSH keybindings (for interactive shells) to
     behave like VI; for emacs users, option [[#OPTION_EMACS][EMACS]] is

     This option, if enabled, does the same as

        : % bindkey -v          # Enables the vi-keymap
        : % unsetopt EMACS      

     Unsetting this option, on the other hand, has no effect.

     Please note that just because this option is set, the vi-keybindings are
     not guaranteed to be enabled (i.e., your scripts must not rely on this
     option to determine whether the vi-keymap is activated or not):

     #+BEGIN_EXAMPLE
        % setopt VI
        % bindkey -lL main 
        bindkey -A viins main
        % bindkey -e
        % bindkey -lL main 
        bindkey -A emacs main
        % [[ -o VI ]] && print "VI still enabled!"
        VI still enabled!
     #+END_EXAMPLE

     This option is just provided for compatibility reasons; you should
     always prefer to use the =bindkey= builtin.

     #+BEGIN_SRC zsh :tangle zshrc
        setopt VI
     #+END_SRC

     #+BEGIN_SRC zsh :tangle zshrc.default
        setopt NO_VI
     #+END_SRC

**** TODO =ZLE= (-Z)


** Option aliases
   These are aliases for the options above, as seen in section 16.3 of the manual.
**** TODO Migrate these aliases to the options above, use the :PROPERTIES: drawer and define a property such as "ALIAS".
**** TODO =BRACE_EXPAND=
**** TODO =DOT_GLOB=
**** TODO =HASH_ALL=
**** TODO =HIST_APPEND=
**** TODO =HIST_EXPAND=
**** TODO =LOG=
**** TODO =MAIL_WARN=
**** TODO =ONE_CMD=
**** TODO =PHYSICAL=
**** TODO =PROMPT_VARS=
**** TODO =STDIN=
**** TODO =TRACK_ALL=

** Single letter options
**** TODO Migrate these aliases to the options above, use the :PROPERTIES: drawer and define a property such as "SINGLE_LETTER".

     The single letters are already present in the headlines above, such as (-4) etc.
