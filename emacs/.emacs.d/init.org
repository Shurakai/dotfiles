# -*- mode: org -*-
#+TITLE:  Emacs configuration in org-mode
#+AUTHOR: Christian Heinrich
#+EMAIL:  com-emacs@gladbachcity.de
#+STARTUP: indent
#+SETUPFILE: ~/org/org-templates/level-1.org
#+INCLUDE:   ~/org/org-templates/level-1.org
#+LANGUAGE:   en
#+TAGS: PLUGIN(p) ORGMODE(o)
#+PROPERTY: header-args:emacs-lisp :tangle init.el

This is my personal emacs configuration, although I took quite a bit from [[http://mescal.imag.fr/membres/arnaud.legrand/misc/init.org][Arnaud Legrand]].
I'm a VIM guy; I hence use evil-mode.

* Load files and important plugins
** ELPA
#+begin_src emacs-lisp
(require 'package)
(package-initialize)
(setq package-archives
'(("ELPA" . "http://tromey.com/elpa/")
   ("gnu" . "http://elpa.gnu.org/packages/")
   ("melpa" . "http://melpa.milkbox.net/packages/")
   ("marmalade" . "http://marmalade-repo.org/packages/")))
#+end_src

To install new packages, use =M-x package-install=.
** Configure load paths                                        

The load-paths for org-mode are added later.

#+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d/elpa/evil-1.0.8")
(add-to-list 'load-path "~/.emacs.d/elpa/ob-lua-20160411.2024")
(add-to-list 'load-path "~/.emacs.d/elpa/typopunct-1.0")
(add-to-list 'load-path "~/.emacs.d/elpa/evil-easymotion-20160617.1840")
#+end_src

** Load org-mode                                                   :ORGMODE:
#+begin_src emacs-lisp
(add-to-list 'load-path "~/.emacs.d/org-mode/lisp/")
(add-to-list 'load-path "~/.emacs.d/org-mode/contrib/lisp/")
(add-to-list 'load-path "~/.emacs.d/org-drill/")
(require 'org-install)
(require 'org)
#+end_src

** Load org-protocol for capturing websites easily

Note: This won't work anymore with Firefox 57+, according to https://addons.mozilla.org/en-US/firefox/addon/org-mode-capture/ but it seems that there is now
an alternative: https://addons.mozilla.org/en-US/firefox/addon/org-capture/. Check the GitHub page for setup.

#+BEGIN_SRC 
(server-start)
(require 'org-protocol)
#+END_SRC

** Filetypes / emacs modes
#+begin_src emacs-lisp
(setq auto-mode-alist
   (append (mapcar 'purecopy
      '(("\\.c$"   . c-mode)
        ("\\.h$"   . c-mode)
        ("\\.c.simp$" . c-mode)
        ("\\.h.simp$" . c-mode)
        ("\\.a$"   . c-mode)
        ("\\.w$"   . cweb-mode)
        ("\\.cc$"   . c++-mode)
        ("\\.S$"   . asm-mode)
        ("\\.s$"   . asm-mode)
        ("\\.p$"   . pascal-mode)
        ("\\.Rmd$" . poly-markdown-mode)
        ("\\.pas$" . pascal-mode)
        ("\\.tex$" . LaTeX-mode)
        ("\\.txi$" . Texinfo-mode)
        ("\\.el$"  . emacs-lisp-mode)
        ("emacs"  . emacs-lisp-mode)
        ("\\.ml[iylp]?" . tuareg-mode)
        ("[mM]akefile" . makefile-mode)
        ("[mM]akefile.*" . makefile-mode)
        ("\\.mak" . makefile-mode)
        ("\\.cshrc" . sh-mode)
        ("\\.html$" . html-mode)
        ("\\.org$" . org-mode)
)) auto-mode-alist))
#+end_src
* Emacs GUI
** Theme

#+begin_src emacs-lisp
  (load-theme 'tango-dark t)
#+end_src

** Disable splash screen
#+begin_src emacs-lisp
(setq inhibit-splash-screen t)
#+end_src

** Change frame name of emacs

#+begin_src emacs-lisp
(setq frame-title-format
  '("Emacs - " (buffer-file-name "%f"
    (dired-directory dired-directory "%b"))))
#+end_src

** Disable tool-bar

#+begin_src emacs-lisp
;;(scroll-bar-mode 0)
(tool-bar-mode -1)
#+end_src


** TODO Line and column numbering       
#+begin_src emacs-lisp
(line-number-mode 1)
(column-number-mode 1)
#+end_src

** TODO Parenthesis
#+begin_src emacs-lisp
(load-library "paren")
(show-paren-mode 1)
;;(transient-mark-mode t)
(require 'paren)
#+end_src

* Keyboard ad mouse 
** Scroll one line at a time (when using the mouse wheel)

#+BEGIN_SRC emacs-lisp
(setq mouse-wheel-scroll-amount '(1 ((shift) . 1)))
#+END_SRC

** Load emacs initialization file:                                     :LUKA:
#+begin_src emacs-lisp
(global-set-key (kbd "C-c i") 
(lambda() (interactive)(org-babel-load-file "~/.emacs.d/init.org")))
#+end_src
[16:28:10; 24.04.2013]

** Change font size                                              :CHRISTIAN:

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
#+END_SRC

[2017-02-15 Wed]

** UTF 8 by default                                                 :ARNAUD:
#+begin_src emacs-lisp
(set-terminal-coding-system 'utf-8)
(set-keyboard-coding-system 'utf-8)
(prefer-coding-system 'utf-8)
#+end_src
** Keyboard fix for Mac OS X users...                               :ADRIEN:
Thanks to Adrien Lebre for providing me with this
ns-use-mac-modifier-symbols thing. Unfortunately, this is broken at
the moment (I tried to wrap the command around the cond but it should
fail on mac). 
#+begin_src emacs-lisp
(cond
 ((string-equal system-type "darwin")   ; Mac OS X
  (progn
    (setq
     ns-command-modifier 'meta         ; Apple/Command key is Meta
         ns-alternate-modifier nil         ; Option is the Mac Option key
         ns-use-mac-modifier-symbols  nil  ; display standard Emacs (and not standard Mac) modifier symbols
         ))
  )
 )
#+end_src
** CUA mode a.k.a C-x, C-c, C-v 
Yuck! Many people like this but I hate it as it conflicts with some of
my other shortcuts (e.g., the ones for spelling a region).
#+begin_src emacs-lisp
;; (cua-mode t)
#+end_src
** Hide/show the C block:                                          :LUKA:WEB:
#+begin_src emacs-lisp
(add-hook 'c-mode-common-hook
  (lambda()
    (local-set-key (kbd "C-c <right>") 'hs-show-block)
    (local-set-key (kbd "C-c <left>")  'hs-hide-block)
    (local-set-key (kbd "C-c <up>")    'hs-hide-all)
    (local-set-key (kbd "C-c <down>")  'hs-show-all)
    (hs-minor-mode t)))
#+end_src
[16:32:57; 24.04.2013]

** Reload buffer:                                                   :ARNAUD:
#+begin_src emacs-lisp
(global-set-key [f5] '(lambda () (interactive) (revert-buffer nil t nil)))
#+end_src
[16:34:57; 24.04.2013]
** Compile / Make
#+begin_src emacs-lisp
(global-set-key "\^x\^e" 'compile)
#+end_src
** Navigate back in text                                             :ARNAUD:
#+begin_src emacs-lisp
(defun jump-mark ()
  (interactive)
  (set-mark-command (point)))
(defun beginning-of-defun-and-mark ()
  (interactive)
  (push-mark (point))
  (beginning-of-defun))
(defun end-of-defun-and-mark ()
  (interactive)
  (push-mark (point))
  (end-of-defun))

(global-set-key "\^c\^b" 'beginning-of-defun-and-mark)
(global-set-key "\^c\^e" 'end-of-defun-and-mark)
(global-set-key "\^c\^j" 'jump-mark)
(global-set-key [S-f6] 'jump-mark)              ;; jump from mark to mark
#+end_src
** Goto line                                                         :ARNAUD:
#+begin_src emacs-lisp
(global-set-key "\M-g" 'goto-line)
#+end_src
** Use X clipboard (cut'n paste)                                        :WEB:
   Since I switched to emacs 24, cutting and pasting to emacs has
   become burdensome. For example, I had to do S-C-c after selecting
   terminals areas before being able to copy in emacs. With the
   following commants, I don't have to do this anymore. I wish it
   would have eased interactions when running emacs in a terminal
   (i.e., with -nw) but it does not. :( http://stackoverflow.com/questions/13036155/how-to-to-combine-emacs-primary-clipboard-copy-and-paste-behavior-on-ms-windows
#+begin_src emacs-lisp
(setq select-active-regions nil)
(setq x-select-enable-primary t)
(setq x-select-enable-clipboard t)
(setq mouse-drag-copy-region t)
#+end_src
** Cut'n paste in no-window mode                              :noexport:WEB:
   Despite what can be found in many old discussions on emacs mailing
   lists, it seems to be possible and the trick is to use xclip!
http://stackoverflow.com/questions/4580835/emacs-copy-kill-ring-to-system-clipboard-in-nowindow-mode   http://stackoverflow.com/questions/5288213/how-can-i-paste-the-selected-region-outside-of-emacs/14659015#14659015

If you simply use the following commands, then emacs cut-n-paste works
just perfectly with the X clipboard. I can select in emacs no window
and then paste with the middle-click button! :) Many thanks to Vijay
for pointing me out that I had forgotten the "require" line... :)
#+begin_src emacs-lisp
;;  (if(string-equal system-type "gnu/linux")   ; Linux!
;;      (
      ;; (require (quote xclip))
      ;; (xclip-mode 1)
;;      )()
;;        )
#+end_src
** Increase/decrease text size in emacs                                :WEB:
#+begin_src emacs-lisp
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)
;; C-x C-0 restores the default font size
#+end_src
[11:26:47; 18.04.2014]
** Add spell checker to the file                                       :WEB:
#+begin_src emacs-lisp
;; Inspired from http://tex.stackexchange.com/questions/166681/changing-language-of-flyspell-emacs-with-a-shortcut
;; (defun spell (choice)
;;    "Switch between language dictionaries."
;;    (interactive "cChoose:  (a) American | (f) Francais")
;;     (cond ((eq choice ?1)
;;            (setq flyspell-default-dictionary "american")
;;            (setq ispell-dictionary "american")
;;            (ispell-kill-ispell))
;;           ((eq choice ?2)
;;            (setq flyspell-default-dictionary "francais")
;;            (setq ispell-dictionary "francais")
;;            (ispell-kill-ispell))
;;           (t (message "No changes have been made."))) )

(define-key global-map (kbd "C-c s a") (lambda () (interactive) (ispell-change-dictionary "american")))
(define-key global-map (kbd "C-c s f") (lambda () (interactive) (ispell-change-dictionary "francais")))
(define-key global-map (kbd "C-c s r") 'flyspell-region)
(define-key global-map (kbd "C-c s b") 'flyspell-buffer)
(define-key global-map (kbd "C-c s s") 'flyspell-mode)
#+end_src
** Invoke magit (for git)                                              :WEB:
From http://magit.vc/manual/magit.pdf

#+begin_src emacs-lisp
(global-set-key (kbd "C-x g") 'magit-status)
(global-set-key (kbd "C-x M-g") 'magit-dispatch-popup)
;; (global-magit-file-mode 1)
#+end_src

* Small fixes:
** PDF with LaTeX by default                                        :ARNAUD:
#+begin_src emacs-lisp
(defun auto-fill-mode-on () (TeX-PDF-mode 1))
(add-hook 'tex-mode-hook 'TeX-PDF-mode-on)
(add-hook 'latex-mode-hook 'TeX-PDF-mode-on)
(setq TeX-PDF-mode t)
#+end_src
** Open links to PDF files with evince:                :ARNAUD:WEB:noexport:
#+begin_src emacs-lisp
(add-hook 'org-mode-hook
      '(lambda ()
         (delete '("\\.pdf\\'" . default) org-file-apps)
         (add-to-list 'org-file-apps '("\\.pdf\\'" . "evince %s"))))
(setq TeX-view-program-selection (quote (((output-dvi style-pstricks) "dvips and gv") (output-dvi "xdvi") (output-pdf "Evince") (output-html "xdg-open"))))
#+end_src
[16:38:53; 24.04.2013]
** Auto-fill-mode
#+begin_src emacs-lisp
(defun auto-fill-mode-on () (auto-fill-mode 1))
(add-hook 'text-mode-hook 'auto-fill-mode-on)
(add-hook 'emacs-lisp-mode 'auto-fill-mode-on)
(add-hook 'tex-mode-hook 'auto-fill-mode-on)
(add-hook 'latex-mode-hook 'auto-fill-mode-on)
#+end_src
** Make <TAB> in C mode just insert a tab if point is in the middle of a line: :WEB:noexport:
#+begin_src emacs-lisp
;; (setq c-tab-always-indent nil)
#+end_src
[16:33:41; 24.04.2013]
** C coding style                                                       :WEB:
From http://www.emacswiki.org/emacs/IndentingC.
#+begin_src emacs-lisp
  (setq c-default-style "k&r")
  (setq c-basic-offset 2)
#+end_src
** Convenient shortcut to reindent C files
#+begin_src emacs-lisp
 (defun c-reformat-buffer()
    (interactive)
    (save-buffer)
    (setq sh-indent-command (concat
                             "indent -i2 -kr --no-tabs"
                             buffer-file-name
                             )
          )
    (mark-whole-buffer)
    (universal-argument)
    (shell-command-on-region
     (point-min)
     (point-max)
     sh-indent-command
     (buffer-name)
     )
    (save-buffer)
    )
  ;;(define-key c-mode-base-map [f7] 'c-reformat-buffer)
#+end_src
** Asking for confirmation concisely:                                   :WEB:
Link: http://org.ryuslash.org/dotfiles/emacs/init.html#sec-7-1
Being asked to type in yes explicitly all the time gets very tedious. I understand that it is safer since y is much easier to type in accidentally than yes and so the potential to say yes to things you don't want is there, but I haven't had any such problems yet.

#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src
* Org-mode related configuration
** Write letters with KOMA letter                           :PLUGIN:ORGMODE:
#+BEGIN_SRC emacs-lisp
(eval-after-load 'ox '(require 'ox-koma-letter))
#+END_SRC

** Org-drill                                                :PLUGIN:ORGMODE:

#+BEGIN_SRC emacs-lisp
(require 'org-drill)
(setq org-drill-question-tag "KARTEIKARTE")
(setq org-drill-add-random-noise-to-intervals-p t)
(setq org-drill-save-buffers-after-drill-sessions-p nil)
(setq org-drill-sm5-initial-interval 1.0)
(setq org-drill-learn-fraction 0.2)
#+END_SRC
*** Set a custom tag for drills

#+begin_src emacs-lisp
(defun custom/org-drill-tag(tag)
  "Start org-drill with a user chosen question tag."
  (interactive "sInput the tag to drill: ")
  (custom-set-variables
   '(org-drill-question-tag tag))
  (org-drill)
  (custom-set-variables
   '(org-drill-question-tag "KARTEIKARTE")))
#+end_src
** org-crypt                                                 :PLUGIN:ORGMODE:

   Org-crypt allows us to encrypt specific entries.

#+BEGIN_SRC emacs-lisp
(require 'org-crypt)
(org-crypt-use-before-save-magic)
(setq org-tags-exclude-from-inheritance (quote ("crypt")))

(setq org-crypt-key "516FCC3C")
  ;; GPG key to use for encryption
  ;; Either the Key ID or set to nil to use symmetric encryption.

(setq auto-save-default nil)
  ;; Auto-saving does not cooperate with org-crypt.el: so you need
  ;; to turn it off if you plan to use org-crypt.el quite often.
  ;; Otherwise, you'll get an (annoying) message each time you
  ;; start Org.

  ;; To turn it off only locally, you can insert this:
  ;;
  ;; # -*- buffer-auto-save-file-name: nil; -*-
#+END_SRC
** org-download                                              :PLUGIN:ORGMODE:

This plugin allows us to download images from websites via the
~org-download-image~ command or to take a screenshot of the screen (one
can select what to screenshot) via ~org-download-screenshot~.

#+BEGIN_SRC emacs-lisp
 (require 'org-download)
 (setq org-download-method 'attach)
#+END_SRC
** Load default file

#+BEGIN_SRC emacs-lisp
(find-file "~/org/journal_privat.org")
#+END_SRC

** Set default directory
#+begin_src emacs-lisp
(setq org-directory "~/Documents/Notizen/")
#+end_src

** Cosmetics
#+begin_src emacs-lisp
(setq org-hide-leading-stars t)
(setq org-alphabetical-lists t)
(setq org-src-fontify-natively t)  ;; you want this to activate coloring in blocks
(setq org-src-tab-acts-natively t) ;; you want this to have completion in blocks
(setq org-hide-emphasis-markers t) ;; to hide the *,=, or / markers
(setq org-pretty-entities t)       ;; to have \alpha, \to and others display as utf8 http://orgmode.org/manual/Special-symbols.html
(setq org-cycle-separator-lines 0) ;; hides empty lines between headlines when looking at an outline
#+end_src
** org-mode configuration

#+begin_src emacs-lisp
(setq org-catch-invisible-edits show-and-error) ;; An invisible area is hidden as "...", but can still be edited. This setting
                                                ;; throws an error and shows the hidden area.
#+end_src

** Agenda
*** Agenda general configuration

 #+begin_src emacs-lisp
 (setq org-agenda-ndays 7)
 (setq org-agenda-show-all-dates t)
 (setq org-agenda-skip-deadline-if-done t)
 (setq org-agenda-skip-scheduled-if-done t)
 (setq org-agenda-start-on-weekday nil)
 (setq org-agenda-start-with-follow-mode t) ;; When the curser is positioned on a line (or moved), show that entry in another window
 (setq org-stuck-projects '("+LEVEL=3/-DONE-CANCELLED-DEFERRED-READ-TESTED-VISITED" ("*") nil "")) ;; This needs to be adapted
 #+end_src

 #+RESULTS:
 : t

*** Agenda: Enable habits

This allows you to track single habits (like reading a journal/blog/... at
least once a month but no more than every two weeks) and how you kept
up with them.

#+begin_src emacs-lisp
(require 'org-habit)
(add-to-list 'org-modules "org-habits")
#+end_src

*** Agenda: Included files
These are my personal files that I want to be displayed in the agenda:

#+begin_src emacs-lisp
 (setq org-agenda-files
   (quote
    ("~/Documents/Notizen/privat.org" "~/org/journal_privat.org" "~/workspace/inria/research-collab/journal.org")))
#+end_src

#+begin_src emacs-lisp
(tags-todo "STEUERN" 
  ((org-agenda-overriding-header "Phone Calls")
  ( org-agenda-files
   (quote
    ("~/Documents/Notizen/privat.org" "~/org/journal_privat.org" "~/workspace/inria/research-collab/journal.org"))
)))
#+end_src

*** Add short cut keys :ARNAUD:

#+begin_src emacs-lisp
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-cc" 'org-capture)
(global-set-key (kbd "C-c a") 'org-agenda)
(define-key global-map "\C-cl" 'org-store-link)
(define-key global-map (kbd "C-c a") 'org-agenda)
(global-set-key "\C-cb" 'org-iswitchb)
#+end_src

#+RESULTS:...

*** Agenda include all todos and diary :ARNAUD:
#+begin_src emacs-lisp
(setq org-agenda-include-all-todo t)
(setq org-agenda-include-diary t)
#+end_src

#+RESULTS:...
*** Agenda: Setup blocks

#+begin_src emacs-lisp
(setq org-agenda-custom-commands
      '(("a" "Agenda and Home-related tasks"
         (
          (stuck "" (
            (org-agenda-overriding-header "Bescheuerte Projekte")))
          (tags-todo "STEUERN")
          (tags "garden")
          (agenda "")
       ))
       ("o" "Agenda and Office-related tasks"
         ((agenda "")
          (tags-todo "work")
          (tags "office")))))
#+end_src

*** Hide empty blocks

The blocks (sections within the agenda view) that are empty may be
annoying. They can be hidden with the following code:

From this thread:
https://lists.gnu.org/archive/html/emacs-orgmode/2015-06/msg00266.html

#+begin_src elisp
  (defun org-agenda-delete-empty-blocks ()
    "Remove empty agenda blocks.
  A block is identified as empty if there are fewer than 2
  non-empty lines in the block (excluding the line with
  `org-agenda-block-separator' characters)."
    (when org-agenda-compact-blocks
      (user-error "Cannot delete empty compact blocks"))
    (setq buffer-read-only nil)
    (save-excursion
      (goto-char (point-min))
      (let* ((blank-line-re "^\\s-*$")
             (content-line-count (if (looking-at-p blank-line-re) 0 1))
             (start-pos (point))
             (block-re (format "%c\\{10,\\}" org-agenda-block-separator)))
        (while (and (not (eobp)) (forward-line))
          (cond
           ((looking-at-p block-re)
            (when (< content-line-count 2)
              (delete-region start-pos (1+ (point-at-bol))))
            (setq start-pos (point))
            (forward-line)
            (setq content-line-count (if (looking-at-p blank-line-re) 0 1)))
           ((not (looking-at-p blank-line-re))
            (setq content-line-count (1+ content-line-count)))))
        (when (< content-line-count 2)
          (delete-region start-pos (point-max)))
        (goto-char (point-min))
        ;; The above strategy can leave a separator line at the beginning
        ;; of the buffer.
        (when (looking-at-p block-re)
          (delete-region (point) (1+ (point-at-eol))))))
    (setq buffer-read-only t))

  (add-hook 'org-agenda-finalize-hook #'org-agenda-delete-empty-blocks)
#+end_src

#+RESULTS:
| org-agenda-delete-empty-blocks |

*** Agenda ordering                                             :CHRISTIAN:

Normally, items that have been rescheduled (because they weren't
finished the date they were originally scheduled) appear on the top of
the agenda. However, tasks that have a priority assigned should always
be more important and be shown on the top of the agenda. For example,
like this:

Default (priority [#A] is ignored)
#+begin_quote
journal: Sched.5x:  TODO Do something really important
journal: Sched.2x:  [#A] Sign up for something
#+end_quote

With this configuration: (priority is more important than date)
#+begin_quote
journal: Sched.2x:  [#A] Sign up for something
journal: Sched.5x:  TODO Do something really important
#+end_quote

#+begin_src emacs-lisp
(setq org-agenda-sorting-strategy 
  (quote 
    (time-up priority-down)))
#+end_src

#+RESULTS:
| time-up | priority-down |

*** Super Agenda Plugin                                  :CHRISTIAN:PLUGIN:

This loads and enables the 
#+begin_src emacs-lisp
(require 'org-super-agenda)
(org-super-agenda-mode 1)
#+end_src 

#+RESULTS:
: t

#+begin_src emacs-lisp

(let ((org-super-agenda-groups
       '((:name "Books to read"
                :and (:todo "UNREAD" :tag ("BUCH" "book")))
         (:discard (:anything t)))))
  (org-todo-list))
#+end_src 

#+RESULTS:
: t

#+begin_src emacs-lisp
(let ((org-super-agenda-groups
       '((:log t)  ; Automatically named "Log"
         (:name "Today"
                :scheduled today)
         ;(:habit t)
         (:name "Due today"
                :deadline today)
         (:name "Overdue"
                :deadline past)
         (:name "Due soon"
                :deadline future)
         (:name "Unimportant"
                :todo ("SOMEDAY" "MAYBE" "CHECK" "UNREAD" "UNWATCHED")
                :order 100)
         (:name "Waiting..."
                :todo "WAITING"
                :order 98)
         (:name "Scheduled earlier"
                :scheduled past)
         (:name "Scheduled"
                :time-grid t)
)))
  (org-todo-list))
#+end_src

#+RESULTS:
: t

*** Add capture templates so that we can quickly add entries    :CHRISTIAN:

Please note that *the first asterisk is
quoted*. If this is not done, this source block will *not* be tangled!

#+begin_src emacs-lisp
(setq org-capture-templates
      (quote (("j" "Berufl. Journal" plain (file+function "~/workspace/inria/research-collab/journal.org" Shurakai/find-journal-tree)
               "*** %? %^g" )
              ("p" "Priv. Journal" plain (file+function "~/org/journal_privat.org" Shurakai/find-journal-tree)
               "*** %? %^g" )
              ("f" "Franz. Vokabel" plain (file "~/Documents/Notizen/Franzoesisch/Vokabeln.org")
               "** \\nbsp{} :KARTEIKARTE:FRANZ:
:PROPERTIES:
:DRILL_CARD_TYPE: twosided
:END:
\*** Deutsch
    %^{prompt}
\*** Französisch
    %^{prompt}
" ))))
#+end_src

* Org-mode shortcuts

* Org-mode + babel:
** Seamless use of babel (no confirmation, lazy export)              :ARNAUD:
#+begin_src emacs-lisp
(setq org-export-babel-evaluate nil) ;; This is for org-mode<9. 
;;  Otherwise, you need to set #+PROPERTY: header-args :eval never-export in the beginning or your document
(setq org-confirm-babel-evaluate nil)
#+end_src
** Some initial languages we want org-babel to support:             :ARNAUD:
#+begin_src emacs-lisp
  (org-babel-do-load-languages
   'org-babel-load-languages
   '(
     (shell . t)
     (python . t)
     (R . t)
     (C . t)
     (ruby . t)
     (ocaml . t)
     (ditaa . t)
     (dot . t)
     (haskell . t)
     (octave . t)
     (sqlite . t)
     (perl . t)
     (screen . t)
     (plantuml . t)
     (lilypond . t)
     (org . t)
     (makefile . t)
     ))
  (setq org-src-preserve-indentation t)
#+end_src

#+RESULTS:

** Adding source code blocks:                                          :LUKA:
To use this, type C-c C-,
The old shortcuts (<m and then TAB) were outdated in org 9.2 - if you
still want to use this, you need to add ~(require 'org-tempo)~.

*** Emacs-elisp code:
#+begin_src emacs-lisp
(add-to-list 'org-structure-template-alist
        '("m" . "src emacs-lisp"))
#+end_src

#+RESULTS:...

*** R code:
#+begin_src emacs-lisp
(add-to-list 'org-structure-template-alist
        '("r" . "src R :results output :session *R* :exports both"))
#+end_src

#+RESULTS:...

This creates an R block for graphics that are stored in the /tmp/.
#+begin_src emacs-lisp
(add-to-list 'org-structure-template-alist
        '("R" . "#+begin_src R :results file graphics :file (org-babel-temp-file \"figure\" \".png\") :exports both :width 600 :height 400 :session *R*"))
#+end_src

#+RESULTS:...

This creates an R block for graphics that are stored in the directory of the current file.

#+begin_src emacs-lisp
(add-to-list 'org-structure-template-alist
        '("RR" . "src R :results file graphics :file  (org-babel-temp-file (concat (file-name-directory (or load-file-name buffer-file-name)) \"figure-\") \".png\") :exports both :width 600 :height 400 :session *R*"))
#+end_src

*** Python code
#+begin_src emacs-lisp
(add-to-list 'org-structure-template-alist
        '("p" . "src python :results output :exports both"))
#+end_src

#+begin_src emacs-lisp
(add-to-list 'org-structure-template-alist
        '("P" . "src python :results output :session *python* :exports both"))
#+end_src
*** Bash "sh" code:
#+begin_src emacs-lisp
(add-to-list 'org-structure-template-alist
        '("b" . "src sh :results output :exports both"))
#+end_src

#+RESULTS:...

This comes with a session argument (e.g., in case you want to keep ssh connexions open).
#+begin_src emacs-lisp
(add-to-list 'org-structure-template-alist
        '("B" . "src sh :session foo :results output :exports both"))
#+end_src

#+RESULTS:...

** Display images                                                   :ARNAUD:
#+begin_src emacs-lisp
(add-hook 'org-babel-after-execute-hook 'org-display-inline-images) 
(add-hook 'org-mode-hook 'org-display-inline-images)
(add-hook 'org-mode-hook 'org-babel-result-hide-all)
#+end_src

* Org-mode capture                                        :ORGMODE:CHRISTIAN:

#+begin_src emacs-lisp
;; http://stackoverflow.com/questions/9005843/interactively-enter-headline-under-which-to-place-an-entry-using-capture
(defun Shurakai/find-journal-tree ()
  (defconst Shurakai/journal-headline-format "[%Y-%m-%d %a]")
  (setq headline (format-time-string Shurakai/journal-headline-format))
  (goto-char (point-min)) ;; Go to the very beginning of the file
  (re-search-forward (format-time-string "\* %Y")) ;; Find the heading with the right year
  (outline-show-children) ;; and open it (otherwise, the next search doesn't find anything?)
  (if (re-search-forward  ;; see https://www.gnu.org/software/emacs/manual/html_node/eintr/re_002dsearch_002dforward.html
     (format org-complex-heading-regexp-format (regexp-quote headline)) 
     nil t)
     (goto-char (point-at-bol)) ;; then
     (goto-char (point-max))    ;; else
     (insert "** " headline))   ;; also else
  (org-end-of-subtree))
#+end_src

* Org-mode LaTeX export
** ACM                                                              :ARNAUD:
#+begin_src emacs-lisp
 (unless (boundp 'org-latex-classes) (setq org-latex-classes nil))

 (add-to-list 'org-latex-classes '("acm-proc-article-sp" "\\documentclass{acm_proc_article-sp}\n \[NO-DEFAULT-PACKAGES]\n \[EXTRA]\n  \\usepackage{graphicx}\n  \\usepackage{hyperref}"  ("\\section{%s}" . "\\section*{%s}") ("\\subsection{%s}" . "\\subsection*{%s}")                       ("\\subsubsection{%s}" . "\\subsubsection*{%s}")                       ("\\paragraph{%s}" . "\\paragraph*{%s}")                       ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))

 (setq org-latex-to-pdf-process '("pdflatex -interaction nonstopmode -output-directory %o %f ; bibtex `basename %f | sed 's/\.tex//'` ; pdflatex -interaction nonstopmode -output-directory  %o %f ; pdflatex -interaction nonstopmode -output-directory %o %f"))
#+end_src
** General articles                                                    :LUKA:
I'm not completely sure I need this. I could probably remove it...
#+begin_src emacs-lisp
(add-to-list 'org-latex-classes '("article" "\\documentclass{article}\n \[NO-DEFAULT-PACKAGES]\n \[EXTRA]\n  \\usepackage{graphicx}\n  \\usepackage{hyperref}"  ("\\section{%s}" . "\\section*{%s}") ("\\subsection{%s}" . "\\subsection*{%s}")                       ("\\subsubsection{%s}" . "\\subsubsection*{%s}")                       ("\\paragraph{%s}" . "\\paragraph*{%s}")                       ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+end_src

#+RESULTS:...

[15:18:27; 16.05.2013]
* Org-mode for github                                              :noexport:
** toc-org
toc-org helps you to have an up-to-date table of contents in org files
without exporting (useful primarily for readme files on GitHub).
#+begin_src emacs-lisp
;;(if (require 'org-toc nil t)
;;    (add-hook 'org-mode-hook 'toc-org-enable)
;;  (warn "toc-org not found"))
#+end_src
Now, every time I save an org file, the first headline with a :TOC:
tag will be updated with the current table of contents.
* Org-ref                                                     :LUKA:noexport:
# This seems to break my export
# Following what is explained at https://github.com/jkitchin/jmax/blob/master/org/org-ref.org
# #+begin_src emacs-lisp
#   (require 'reftex-cite)
#   (require 'dash)
#   (load "~/.emacs.d/elpa/org-ref/org-ref.el")
# #+end_src
# And a convenient shortcut from Luka:
# #+begin_src emacs-lisp
#   (global-set-key (kbd "C-c )") 'org-ref-insert-cite-link)
# #+end_src
* Org-mode mobile                                                  :noexport:
** Setup
#+begin_src emacs-lisp
;; Set to the name of the file where new notes will be stored
(setq org-mobile-inbox-for-pull "~/org/flagged.org")
;; Set to <your Dropbox root directory>/MobileOrg.
(setq org-mobile-directory "~/Dropbox/Apps/MobileOrg")
#+end_src
* Org-mode custom stuff                                            :noexport:
** org-bullets (cosmetics)

Makes the bullets a bit nicer. Call =org-bullets-mode= to enable once.
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/.emacs.d/elpa/org-bullets-20180208.2343/")
(if (require 'org-bullets)
     (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
     (warn "org-bullets not found"))
;;(org-bullets-mode 1) ; This causes issues if uncommented
#+END_SRC

** org-table-sticky-headers

Sometimes tables are too large to look at all the data at once;
scrolling is inevitable. To always know what each column means, this
plugin uses the header sections and displays the names of the columns.

#+BEGIN_SRC emacs-lisp
; (add-to-list 'load-path "~/.emacs.d/elpa/org-table-sticky-header-20170409.114/")
(add-hook 'org-mode-hook 'org-table-sticky-header-mode)
#+END_SRC
* Org-mode website generation                                      :noexport:
You may want to fully disable this section if you consider using my
init.org as it is really full of custom hardcoded stuff not really
meant to be usable as such.
** Configuration                                                     :ARNAUD:
#+begin_src emacs-lisp
(require 'htmlize)
;; (require 'org-publish) ;;; this is obsolete! do not call this or you will regret it at some point!
(defun sr-org-notes-sitemap-complete ()
  "Take the sitemap-file and turn it into the menu-structure file for Marco Pratesi's phplayersmenu."
  (let* ((base-dir (file-name-as-directory (plist-get project-plist :base-directory)))
         (orig (expand-file-name (concat base-dir (plist-get project-plist :sitemap-filename))))
         (strip-suffix (or (plist-get project-plist :base-extension) "org"))
         (add-suffix (or (plist-get project-plist :html-extension) "html"))
         (link-target (or (plist-get project-plist :menu/link-target) "_blank"))
         (menu-file (or (plist-get project-plist :menu/structure-file) nil))

         (visiting (find-buffer-visiting orig))
         (visiting-output (find-buffer-visiting menu-file))

         (input-buffer (find-file orig))
         (output-buffer (find-file menu-file))

         (old-ndots 1)
         (sub "")
         (old-sub ""))

    (unless menu-file
      (throw 'sr-org-note-kb-completion-error
             "No menu structure file provided. Giving up."))

    (with-current-buffer output-buffer
      (erase-buffer))

    (with-current-buffer input-buffer
      (widen)
      (goto-char (point-min))
      (while (re-search-forward org-bracket-link-analytic-regexp (point-max) t)
        (let ((link (match-string-no-properties 3))
              (text (match-string-no-properties 5))
              (pos 0)
              (ndots 1))

      (with-current-buffer output-buffer
        (if (string-match (concat "\\(" strip-suffix "\\)$") link)
            (setq link (replace-match add-suffix t t link)))
        (while (setq pos (string-match "/" link pos))
          (setq ndots (+ ndots 1))
          (setq pos (+ pos 1)))

        (when (< 1 ndots)
          (string-match "\\(/[^/]*\\)$" link)
          (setq sub (replace-match "" t t link))

          (unless (string= sub old-sub)
            (let ((ds 0)
                  (subs (split-string sub "/"))
                  (old-subs (split-string old-sub "/")))
              (while (string= (car old-subs) (car subs))
                (setq ds (+ ds 1))
                (pop old-subs)
                (pop subs))
              (dolist (d subs)
                (setq ds (+ ds 1))
                (insert
                 (concat
                  (make-string ds ?.) "|" d "\n")))
              (setq old-sub sub))))

        (insert
         (concat
          (make-string ndots ?.) "|" text "|" link "|||" link-target "\n"))
        (setq old-ndots ndots)
        ))))

    (or visiting (kill-buffer input-buffer))

    (with-current-buffer output-buffer
      (save-buffer))
    (or visiting-output (kill-buffer output-buffer))
))

;; stolen from http://orgmode.org/worg/sources/emacs.el
(eval-after-load "ox-html"
'(setq org-html-scripts
       (concat org-html-scripts "\n"
               "<script type=\"text/javascript\">
    function rpl(expr,a,b) {
      var i=0
      while (i!=-1) {
         i=expr.indexOf(a,i);
         if (i>=0) {
            expr=expr.substring(0,i)+b+expr.substring(i+a.length);
            i+=b.length;
         }
      }
      return expr
    }

    function show_org_source(){
       document.location.href = rpl(document.location.href,\".php\",\".org\");
    }
</script>
")))


(setq org-html-htmlize-output-type 'css)

(setq org-publish-project-alist
      '(
("org-notes"
 :base-directory "~/org/public_html/"
 :base-extension "org"
 :html-extension "php"
 :htmlize-output-type "css"
 :htmlized-source t
 :publishing-directory "~/public_html/org/"
 :recursive t
 :publishing-function (org-html-publish-to-html org-org-publish-to-org)
 :headline-levels 4             ; Just the default for this project.
 :auto-preamble t
 :auto-sitemap t                ; Generate sitemap.org automagically...
 :sitemap-filename "sitemap-generated.org"
 :sitemap-title "Sitemap"         ; ... with title 'Sitemap'. 
 :sitemap-sort-files "alphabetically"
 :sitemap-sort-folders "last"
 :sitemap-ignore-case t
;;; tree menus
 :sitemap-style "tree"
 :exclude "sitemap.org"
 ;; Layersmenu:
 :completion-function sr-org-notes-sitemap-complete
 :menu/structure-file "~/org/public_html/menu-structure-file.txt"
 :menu/link-target "_self" ;; optional
 :html-postamble "<div id=\"show_source\"><input type=\"button\" value=\"Show Org source\" onClick='show_org_source()'></div>"
;; :body-only t ;; Only export section between <body> </body>
)
("org-static"
 :base-directory "~/org/public_html/"
 :base-extension "css\\|js\\|ijs\\|svg\\|jpeg\\|gif\\|pdf\\|mp3\\|ogg\\|swf\\|css\\|php\\|html\\|jpg\\|png\\|gif\\|zip\\|pdf\\|ps\\|ps.gz\\|tar.gz\\|tgz\\|c\\|ml\\|txt\\|avi\\|bib\\|m\\|tex\\|exe\\|dat\\|R\\|csv\\|htaccess"
 :publishing-directory "~/public_html/org/"
 :recursive t
 :publishing-function org-publish-attachment
 )
 ("org-sources"
  :base-directory  "~/org/public_html/"
  :base-extension "org"
  :publishing-directory "~/public_html/org/"
  :recursive t
  :publishing-function org-publish-attachment)
 ("org" :components ("org-notes" "org-static" "org-sources"))
      ))
#+end_src
** Shortcut for publishing through the Makefile                     :ARNAUD:
#+begin_src emacs-lisp
(defun org-publish-current-file-custom () 
  (interactive)
  (setq org-export-babel-evaluate nil) ;; do not run babel!
  (org-publish-current-file) 
  (shell-command "make -C ~/org/public_html publish-light")
)

(global-set-key [f6] 'org-publish-current-file-custom)

(defun org-publish-all-custom ()
   (setq org-export-babel-evaluate nil) ;; do not run babel!
   (org-publish-all)  ;; passing t to org-publish-all forces to regenerate everything
   (kill-emacs 0)
   )
#+end_src
** TODO fix colors so that they are in a css
Check 
- http://lists.gnu.org/archive/html/emacs-orgmode/2009-10/msg00280.html
- http://orgmode.org/worg/org-faq.html#preserving-faces-during-batch-export
** TODO Fix menu on the left
I use a "crappy" fold/unfold menu on the left that seems to mislead
many people. I need to remember where I stole the code/idea from as
there was several available alternatives.
* Various exporters                                                :noexport:
** Org-mode freemind/mindmap
#+begin_src emacs-lisp
;;  (add-to-list 'load-path "/usr/share/org-mode/lisp/")
;; (require 'ox-freemind)
#+end_src
** Markdown
#+begin_src emacs-lisp
(require 'ox-md)
#+end_src
* Remote file editing-TRAMP:                                            :WEB:
This is installed by default for most of emacs
Remote File Editing Using Emacs

Emacs has a package called TRAMP (Transparent Remote (file) Access, Multiple Protocol) which allows you to edit files on remote machines via SSH. Since Emacs 22, TRAMP is included with the distribution.

All you need to do is add the following lines to your .emacs file,

#+begin_src emacs-lisp
(require 'tramp)
(setq tramp-default-method "scp")
#+end_src

Then in order to open a file on a remote machine, you can use,

C-x C-f /user@your.host.com:/path/to/file

If you don't want to enter your password every time you open or save a file consider using Public Key Authentication.

TRAMP mode can also be used to edit files on the same machine as another user, if you want to open some file as root you can use,

    C-x C-f /root@127.0.0.1:/path/to/file
[12:25:12; 13.06.2013]
* Open recent files:                                          :LUKA:noexport:
http://www.emacswiki.org/emacs/RecentFiles#toc16
#+begin_src emacs-lisp
(require 'recentf)
    (recentf-mode 1)
    (setq recentf-max-menu-items 25)
    (global-set-key "\C-x\ \C-r" 'recentf-open-files)

(defun undo-kill-buffer (arg)
  "Re-open the last buffer killed.  With ARG, re-open the nth buffer."
  (interactive "p")
  (let ((recently-killed-list (copy-sequence recentf-list))
         (buffer-files-list
          (delq nil (mapcar (lambda (buf)
                              (when (buffer-file-name buf)
                                (expand-file-name (buffer-file-name buf)))) (buffer-list)))))
    (mapc
     (lambda (buf-file)
       (setq recently-killed-list
             (delq buf-file recently-killed-list)))
     buffer-files-list)
    (find-file
     (if arg (nth arg recently-killed-list)
       (car recently-killed-list)))))
(global-set-key (kbd "C-S-t") 'undo-kill-buffer)
#+end_src

* Load evilmode                                                   :CHRISTIAN:

evil-mode seems to mess with the template; I hence have to choose the
template I want *before* I load evil-mode; otherwise, the cursor-color
will not be yellow but black!

#+begin_src emacs-lisp
(require 'evil)
(require 'evil-easymotion)
(evil-mode 1)
#+end_src

* Custom-set variables                                            :CHRISTIAN:

I set these variables via the GUI but I don't know how to set them
here.

#+BEGIN_SRC emacs-lisp
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 ;;'(custom-enabled-themes (quote (tango-dark)))
 '(line-number-mode nil)
 '(org-babel-exp-inline-code-template "src_%lang[%switches%flags]{}")
 '(org-babel-shell-names
   (quote
    ("sh" "bash" "csh" "ash" "dash" "ksh" "mksh" "posh" "zsh")))
 '(org-deadline-warning-days 14)
 '(org-default-notes-file "/tmp/notes.org")
 '(org-hide-leading-stars t)
 '(org-latex-table-caption-above nil)
 '(org-remember-store-without-prompt t)
 '(org-remember-templates
   (quote
    ((116 "* TODO %?
  %u" "~/Documents/Notizen/privat.org" "Tasks")
     (110 "* %u %?" "/tmp/notes.org" "Notes"))))
 '(org-reverse-note-order t)
 '(package-selected-packages
   (quote
    (org-table-sticky-header org-super-agenda org-chef org-bullets magit helm dash-functional typopunct ob-lua lua-mode evil-org evil-easymotion ess epresent color-theme-sanityinc-tomorrow color-theme)))
 '(remember-annotation-functions (quote (org-remember-annotation)))
 '(remember-handler-functions (quote (org-remember-handler)))
 '(safe-local-variable-values
   (quote
    ((org-emphasis-alist
      ("*" bold)
      ("/" italic)
      ("_" nil)
      ("=" org-verbatim verbatim)
      ("~" org-code verbatim)
      ("+"
       (:strike-through nil)))
     (org-emphasis-alist
      ("*" bold)
      ("/" italic)
      ("__" underline)
      ("=" org-verbatim verbatim)
      ("~" org-code verbatim)
      ("+"
       (:strike-through nil)))))))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(require 'remember)
(evilem-default-keybindings ",")
;; Escape on jj
(defun escape-if-next-char (c)
  "Watches the next letter.  If c, then switch to Evil's normal mode; otherwise insert a k and forward unpressed key to unread-command events"
  (self-insert-command 1)
  (let ((next-key (read-event)))
	(if (= c next-key)
	  (progn
		(delete-backward-char 1)
		(evil-esc 1))
	  (setq unread-command-events (list next-key)))))
(defun escape-if-next-char-is-j (arg)
  (interactive "p")
  (if (= arg 1)
	(escape-if-next-char ?j)
	(self-insert-command arg)))
 
(define-key evil-insert-state-map (kbd "j") 'escape-if-next-char-is-j)
(setq org-use-sub-superscripts "{}")

(eval-after-load "org"
  '(progn
     (require 'typopunct)
     (typopunct-change-language 'english)
     (typopunct-mode t)))

(with-eval-after-load 'ox-latex
   (add-to-list 'org-latex-classes
        '("thesis"
          "\\documentclass[american,%
    paper=A4,               % paper size --> A4 is default in Germany
    twoside=true,           % onesite or twoside printing
    openright,              % doublepage cleaning ends up right side
    parskip=full,           % spacing value / method for paragraphs
    chapterprefix=true,     % prefix for chapter marks
    11pt,                   % font size
    headings=normal,        % size of headings
    bibliography=totoc,     % include bib in toc
    listof=totoc,           % include listof entries in toc
    titlepage=on,           % own page for each title page
    captions=tableabove,    % display table captions above the float env
    draft=false]{scrreprt}            % value for draft version
"
          ("\\chapter{%s}" . "\\chapter{%s}")
          ("\\section{%s}" . "\\section{%s}")
          ("\\subsection{%s}" . "\\subsection{%s}")
          ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
          ("\\paragraph{$blacktriangleright$ %s}" . "\\paragraph*{%s}")
          ("\\subparagraph{%s}" . "\\subparagraph*{%s}")
        )
        '("jura-EA"
        "\\documentclass[12pt,a4paper,oneside,smallheadings,pointlessnumbers,BCOR12mm,DIVcalc]{scrreprt}%aus dem KOMA-Script-Paket"
        ;; These are the headline levels and their corresponding LaTeX commands. Make sure they exist!
          ("\\chapter{%s}" . "\\chapter*{%s}") ;; Level 1
          ("\\section{%s}" . "\\section*{%s}") ;; Level 2
        ("\\subsection{%s}" . "\\subsection*{%s}") ;; Level 3
        ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
        ("\\paragraph{%s}" . "\\paragraph*{%s}")
        ("\\subparagraph{%s}" . "\\subparagraph*{%s}")
        ;; Non-standard definitions
        ("\\abschnitt{%s}" . "\\abschnitt*{%s}")
        ("\\uabschnitt{%s}" . "\\uabschnitt*{%s}")
   )))

#+END_SRC

#+BEGIN_SRC emacs-lisp
;;        (org-babel-tangle-file "~/.emacs.d/init.org"
;;                               "~/.emacs.d/init.el"
;;                               "emacs-lisp")
(require 'ox-extra)
(ox-extras-activate '(ignore-headlines))
(defun headline-numbering-filter (data backend info)
  "No numbering in headlines that have a property :numbers: no"
  (let* ((beg (next-property-change 0 data))
         (headline (if beg (get-text-property beg :parent data))))
    (if (and (eq backend 'latex)
         (string= (org-element-property :NUMBERS headline) "no"))
        (replace-regexp-in-string
         "\\(part\\|chapter\\|\\(?:sub\\)*section\\|\\(?:sub\\)?paragraph\\)"
         "\\1*" data nil nil 1)
      data)))

(setq org-export-filter-headline-functions '(headline-numbering-filter))
(global-set-key (kbd "C-x x") 'execute-extended-command)
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
#+END_SRC

#+RESULTS:

